generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model institutions {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  logo_url  String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     teams[]
}

model teams {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  logo_url         String?            @db.VarChar(255)
  institutionId    Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  competitionTeams competitionTeams[]
  institutions     institutions       @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([name, institutionId])
}

model competitions {
  id                      Int        @id @default(autoincrement())
  name                    String     @db.VarChar(255)
  slug                    String     @unique @db.VarChar(255)
  mandatory_proof         Boolean?   @default(false)
  proof_type              ProofType? @default(selfie)
  start_at                DateTime   @db.Timestamptz(6)
  end_at                  DateTime   @db.Timestamptz(6)
  extraFields             Json?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  published               Boolean?   @default(false)
  publication_date        DateTime?  @db.Timestamptz(6)
  banner_background       String?    @db.VarChar(255)
  has_influence           Boolean?   @default(false)
  influence_controls_team Boolean?   @default(false)
  has_likes               Boolean?   @default(false)
  autoApprove             Boolean?   @default(false)
  webhook_configs         Json?

  competitionTeams competitionTeams[]
  donations        donations[]
  influence        influence[]

  @@index([end_at], map: "competitions_end_at")
  @@index([start_at], map: "competitions_start_at")
}

model competitionTeams {
  id             Int  @id @default(autoincrement())
  donation_count Int? @default(0)
  teamId         Int
  competitionId  Int
  amountLikes    Int? @default(0)

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  competitions competitions @relation(fields: [competitionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teams        teams        @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  donations    donations[]
  influences   influence[]

  @@unique([competitionId, teamId])
}

model donations {
  id                Int               @id @default(autoincrement())
  user_name         String?           @db.VarChar(255)
  user_email        String?           @db.VarChar(255)
  hemocioneID       String?           @db.VarChar(255)
  competitionTeamId Int
  competitionId     Int
  influenceId       Int?
  extraFields       Json?
  proof             String?           @db.VarChar(255)
  createdAt         DateTime          @default(now())
  donationDate      DateTime?         @default(now())
  updatedAt         DateTime          @updatedAt
  influence         influence?        @relation(fields: [influenceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  competitions      competitions      @relation(fields: [competitionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  competitionTeams  competitionTeams? @relation(fields: [competitionTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status            Status            @default(pending)

  @@unique([user_email, competitionId])
  @@index([competitionId, hemocioneID], map: "donations_competitionId_hemocioneID") // HemocioneID is the unique identifier for the user in the competition. will be unique in the future, since there are donations with only emails in the database
  @@index([hemocioneID, user_email], map: "donations_hemocioneID") // find donations by hemocioneID
}

enum Status {
  pending
  approved
  rejected
}

model influence {
  id                Int    @id @default(autoincrement())
  hemocioneID       String @db.VarChar(255)
  user_email        String @db.VarChar(255)
  user_name         String @db.VarChar(255)
  competitionId     Int
  code              String @db.VarChar(255)
  amountInfluence   Int    @default(0)
  competitionTeamId Int?

  competitions    competitions      @relation(fields: [competitionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  donations       donations[]
  competitionTeam competitionTeams? @relation(fields: [competitionTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([hemocioneID, competitionId], name: "influence_competitionId_hemocioneID")
  @@unique([code, competitionId], name: "influence_code_competitionId")
}

enum ProofType {
  selfie
  document
}
